                    #
                  %%&
              ,%%%%%%    #,
            %%%%%%%%%       (
         *%%%%%%%%%%%
      #%%%%%%%%%%%@. &%@.        /                           _     __
    %%%%%%& %%%%%%%% %%%%%%%%%@     (        _______ ___ _  (_)__ / /
 @*%%%%%%%%%%%%%%%%% %&%%%%%%%%%%%%%%@ /    / __/ _ `/  ' \/ / -_) /
   &@@@&%%%%%%%%%%%% %%%%%%%%%%%%%%%% /    /_/  \_,_/_/_/_/_/\__/_/
      @@@@@@@@%%%%%% %%%%%%%%%%%%%         ------- seer / 0xwillow
        %@@@@&@@@@@@ %%%%%%%%%%&/
           #@@@@@@@@ %%%%%%%%*
              #@@@&@ %%%%%(
                 @@@.%%%
                   #%#


<ramiel> loading kernel EFI stub ... DONE
<ramiel> patching blah blah blah ... DONE
<ramiel> booting ...


patch startup.nsh for persistence, stored in firmware ??
flashrom

flash ipxe to pci option rom on network card and boot from that


- nvram persistence ?
 is it possible to do persistence through NVRAM, for example store a .efi in a variable and use that .efi as a stub to load whatever malicious thing you want from the internet

 it would both survive reboots, hard disk wipes and all sorts of other stuff
 right ??
 and since nvram is like 64k theres plenty of space

use boot order and recovery boot order network boot for persistence (pxe boot is pre uefi)
StartImage from ram

in order to survive os reinstall - overwrite uefi shell and set boot order to boot uefi shell
in order to survive hard disk wipe - use PXE boot to load stub from internet

dmpstore then create ramdisk
https://techlibrary.hpe.com/docs/iss/proliant_uefi/UEFI_Edgeline_103117/v31394610.html




TODO:
- x86 helloworld
- chainloader (load linux kernel)
- write to uefi vars from usermode via runtime services
- for infection, over-write current bootloader or uefi shell to survive os reinstall (will not survive hard drive nuke)
- hijack boot order or whatever to boot from pxe netboot for recovery
- write read .efi file from uefi and store in var
- load from var
- ransomware from uefi to bypass AV




IMPORTANT NOTE:
- stub persistence via ipxe pci option rom, set as a boot entry
- malicious .efi stored in nvram in case rom runs out of space
   - easier to write to nvram than network card rom, update nvram instead of flashing
- check if nvram has been wiped, then re-download if it has